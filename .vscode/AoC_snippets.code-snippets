{
	// Place your AOC2020 workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Creates source for new day": {
		"prefix": "newdaysource",
		"body": [
			"$LINE_COMMENT",
			"$LINE_COMMENT Created by AdamOttvar on $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE",
			"$LINE_COMMENT",
			"",
			"#include \"day${TM_FILENAME_BASE/[^0-9]//gi}.h\"",
			"",
			"int day${TM_FILENAME_BASE/[^0-9]//gi}(bool part_two) {",
			"#ifndef AoC_RUN_TEST",
			"    cout << \"AoC day${TM_FILENAME_BASE/[^0-9]//gi}: part \" << (part_two ? \"two\" : \"one\") << endl;",
			"#endif",
			"    ifstream in(\"input/input${TM_FILENAME_BASE/[^0-9]//gi}.txt\");",
			"    int result = 0;",
			"    if (in.is_open()) {",
			"        $0",
			"    } else {",
			"        cout << \"File not open\" << endl;",
			"    }",
			"    return result;",
			"}",
			"",
			"#ifndef AoC_RUN_TEST",
			"int main() {",
			"    int result;",
			"    result = day${TM_FILENAME_BASE/[^0-9]//gi}(false);",
			"    cout << \"Result: \" << result << endl;",
			"    return 0;",
			"}",
			"#endif"
		],
		"description": "Creates template for new day"
	},
	"Creates header for new day": {
		"prefix": "newdayheader",
		"body": [
			"$LINE_COMMENT",
			"$LINE_COMMENT Created by AdamOttvar on $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE",
			"$LINE_COMMENT",
			"",
			"#ifndef _DAY${TM_FILENAME_BASE/[^0-9]//gi}_H_",
			"#define _DAY${TM_FILENAME_BASE/[^0-9]//gi}_H_",
			"",
			"#include \"common.h\"",
			"",
			"int day${TM_FILENAME_BASE/[^0-9]//gi}(bool part_two = false);",
			"$0",
			"#endif //_DAY${TM_FILENAME_BASE/[^0-9]//gi}_H_"
		],
		"description": "Creates template for new day"
	}
}